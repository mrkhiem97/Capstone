@model MobileSurveillanceWebApplication.Models.ViewModel.ListUserViewModel

@{
    ViewBag.Title = "Friend List";
    var searchUserModel = (MobileSurveillanceWebApplication.Models.ViewModel.SearchCriteriaViewModel)ViewBag.SearchCriteriaViewModel;

}

<script>

    function onSuccess(response, status, data) {
        window.location = "?SearchKeyword=" + response.SearchKeyword + "&PageNumber=" + response.PageNumber + "&PageCount=" + response.PageCount;
    }




    function onFailure() {
        alert('Something went wrong, please try again!');
    }

    function onLoadMutualFriendSuccess(response, status, data) {
        // Generate modal with carousel inside
        var itemHtml = $("#track-user-pattern").html();


        var fullResult = "";
        for (var i = 0; i < response.length; i++) {
            var item = itemHtml;
            item = item.replace("{avatar}", response[i].Avatar)
                .replace("{fullname}", response[i].Fullname)
                .replace("{friend-id}", response[i].Id).replace("{friend-id}", response[i].Id);
            fullResult += item;
        }
        $("#modal-mutual-friend-body").html(fullResult);
        $("#modal-mutual-friend").modal();
    }


    function onLoadMutualFriendFail() {
        alert('Something went wrong, please try again!');
    }
</script>

<div class="alert alert-info" style="margin-top: 25px; margin-left: 18px; width: 400px"><h4><b>You have these following friends!</b></h4></div>

<div class="row">
    <!-- List Friends-->
    <div class="col-lg-9 col-md-9 col-sm-12">
        <div class="row" style="margin-bottom: 20px">
            @using (Html.BeginForm("ListUser", "User", FormMethod.Post, new { @role = "search" }))
            {
                <div class="col-lg-12" style="margin-left: 18px">
                    <input type="text" name="SearchKeyword" id="searchFriend" class="form-control" placeholder="Your friends name ..." value="@searchUserModel.SearchKeyword" style="width: 400px; display: inline-block">
                    <input type="hidden" name="PageNumber" value="1" />
                    <input type="hidden" name="PageCount" value="0" />
                    <button type="submit" class="btn btn-default" style="display: inline-block; margin-top: 15px">Filter <span class="glyphicon glyphicon-search"></span></button>
                </div><!-- /input-group -->
            }
        </div>

        @foreach (var item in Model.ListUser)
        {
    <!-- Thumbnail User-->

            <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12">
                <div class="list-thumb">
                    <div class="row" align="center">
                        <img src="@item.Avatar" alt="MobileSurveillance" class="avatar-thumbnail">
                    </div>
                    <div class="row" align="center">
                        <h4>@Html.ActionLink(item.Fullname, "ListFriendTrajectory", "User", new { friendId = @item.Id }, htmlAttributes: new { @class = "" })</h4>
                    </div>
                    <div class="row" align="center">
                        <h4> @Html.ActionLink("Track User", "ListFriendTrajectory", "User", new { friendId = @item.Id }, htmlAttributes: new { @class = "label label-primary " })</h4>
                    </div>
                </div>

            </div>
        }
        <!-- Pagination-->
        <div class="row" style="text-align: center;clear:both">
            <div style="text-align: left; display: inline-block; /* for ie6/7: */ *display: inline; zoom: 1;">
                <ul class="pagination">

                    <li>@Html.ActionLink("First", "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = 1, PageCount = searchUserModel.PageCount })</li>
                    @if (searchUserModel.PageNumber > 1)
                    {
                        <li>@Html.ActionLink("<<", "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber - 1, PageCount = searchUserModel.PageCount })</li>
                    }
                    @if (searchUserModel.PageCount > 5)
                    {
                        int firstSegmentLength = 3;
                        while (searchUserModel.PageNumber - firstSegmentLength < 0)
                        {
                            firstSegmentLength--;
                        }

                        int lastSegment = searchUserModel.PageNumber + 3;


                        if (lastSegment > searchUserModel.PageCount)
                        {
                            lastSegment = searchUserModel.PageCount;
                        }

                        for (int i = searchUserModel.PageNumber - firstSegmentLength + 1; i < searchUserModel.PageNumber; i++)
                        {
                            <li>@Html.ActionLink((i).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount })</li>
                        }
                        <li class="active">@Html.ActionLink((searchUserModel.PageNumber).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount })</li>
                        for (int i = searchUserModel.PageNumber + 1; i <= lastSegment + 3 - firstSegmentLength; i++)
                        {
                            <li>@Html.ActionLink((i).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount })</li>
                        }
                    }
                    else
                    {
                        for (int i = 1; i <= searchUserModel.PageCount; i++)
                        {
                            if (i == searchUserModel.PageNumber)
                            {
                                <li class="active">@Html.ActionLink((i).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount })</li>
                            }
                            else
                            {
                                <li>@Html.ActionLink((i).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount })</li>
                            }
                        }
                    }
                    @if (searchUserModel.PageNumber < searchUserModel.PageCount)
                    {
                        <li>@Html.ActionLink(">>", "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber + 1, PageCount = searchUserModel.PageCount })</li>
                    }
                    <li>@Html.ActionLink("Last", "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageCount, PageCount = searchUserModel.PageCount })</li>
                </ul>
            </div>
        </div>
    </div>
    <!-- End of List Friends-->
    <!-- Suggest Friends-->
    <div class="col-lg-3 col-md-3 col-sm-12">
        <blockquote>
            <p><span class="glyphicon glyphicon-pencil"></span> You may know these people</p>
        </blockquote>
        <!-- List of Suggest-->
        @foreach (var item in Model.ListNotFriend)
        {
            <div class="row" style="margin-bottom: 15px;">
                <div class="row" style="margin-left:20px">
                    <div class="col-md-1">
                        <img src="@item.Avatar" alt="MobileSurveillance" width="32" height="32" />
                    </div>
                    <div class="col-md-6" style="margin-left:20px">
                        <h5>@Html.ActionLink(item.Fullname, "ListFriendTrajectory", "User", new { friendId = @item.Id }, htmlAttributes: new { @class = "" })</h5>
                    </div>
                    <div class="col-md-1">
                        @Ajax.ActionLink("Add Friend", "AddFriend", "SearchResult", new { friendId = item.Id, SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount }, new AjaxOptions()
                                    {
                                        HttpMethod = "POST",
                                        OnSuccess = "onSuccess",
                                        OnFailure = "",
                                    }, new { @class = "label label-default" })
                    </div>
                </div>
                <div class="row" style="margin-left:20px">
                    @if (item.CountMutualFriend != 0)
                    {
                        <div class="row" style="margin-left: 67px">
                            <p>
                                <span class="glyphicon glyphicon-user"></span>
                                @Ajax.ActionLink(" " + item.CountMutualFriend + " mutual friends", "LoadMutualFriend", "User", new { friendId = item.Id }, new AjaxOptions()
                                    {
                                        HttpMethod = "POST",
                                        OnSuccess = "onLoadMutualFriendSuccess",
                                        OnFailure = "onLoadMutualFriendFail",
                                    })
                            </p>
                        </div>
                    }
                    @if (item.CountTrajectory != 0)
                    {
                        <div class="row" style="margin-left: 67px">
                            <p><span class="glyphicon glyphicon-plane"></span> @item.CountTrajectory trajectories</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    <!-- End of Suggest Friends-->
</div>

<div id="track-user-pattern" style="display: none">
    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12" style="margin-top: 20px">
        <div class="list-thumb">
            <div class="row" align="center">
                <img src="{avatar}" alt="MobileSurveillance" class="avatar-thumbnail">
            </div>
            <div class="row" align="center">
                <h4><a href="../User/ListFriendTrajectory?friendId={friend-id}">{fullname}</a></h4>
            </div>
            <div class="row" align="center">
                <h4><a href="../User/ListFriendTrajectory?friendId={friend-id}" class="label label-primary">Track User</a></h4>
            </div>
        </div>

    </div>
</div>

<!-- List of Mutual Friends-->
<div class="modal fade" id="modal-mutual-friend" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Mutual Friends</h4>
            </div>
            <div class="modal-body mutual-friend" id="modal-mutual-friend-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- End List of Mutual Friends-->

<script>
    var substringMatcher = function (strs) {
        return function findMatches(q, cb) {
            var matches, substringRegex;

            // an array that will be populated with substring matches
            matches = [];

            // regex used to determine if a string contains the substring `q`
            substrRegex = new RegExp(q, 'i');

            // iterate through the pool of strings and for any string that
            // contains the substring `q`, add it to the `matches` array
            $.each(strs, function (i, str) {
                if (substrRegex.test(str)) {
                    // the typeahead jQuery plugin expects suggestions to a
                    // JavaScript object, refer to typeahead docs for more info
                    matches.push({ value: str });
                }
            });

            cb(matches);
        };
    };

    //var states = Trajectories;



    $('#searchFriend').typeahead({
        limit: 3,
        hint: true,
        highlight: true,
        minLength: 1,

    },
    {
        name: 'states',
        displayKey: 'value',
        source: substringMatcher(Users)
    });
</script>