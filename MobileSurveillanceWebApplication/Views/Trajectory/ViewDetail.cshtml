@model MobileSurveillanceWebApplication.Models.ViewModel.TrajectoryViewModel

@{
    ViewBag.Title = "Tracking Trajectory " + Model.TrajectoryName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script type="text/javascript">

    // Active list
    var activeList;
    // All location
    var locationList;
    // Search location
    var locationSearchList;
    // Line
    var poly;
    // The map
    var map;
    //For search location
    var SelectedDates = [];
    // For set center
    var centerLat = 0;
    var centerLong = 0;
    // For bounding
    var latlngbounds;

    var Trajectories = [];


    // For direction service
    var directionList = [];
    var directionsDisplay;
    var directionsService = new google.maps.DirectionsService();

    $(document).ready(function () {

        $.ajaxSetup({
            async: false
        });

        function HomeControl(controlDiv, map) {
            // Set CSS styles for the DIV containing the control
            // Setting padding to 5 px will offset the control
            // from the edge of the map
            controlDiv.style.padding = '5px';
            // Set CSS for the control border
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = 'white';
            controlUI.style.borderStyle = 'solid';
            controlUI.style.borderWidth = '2px';
            controlUI.style.cursor = 'pointer';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to set the map to Home';
            controlDiv.appendChild(controlUI);

            // Set CSS for the control interior
            var controlText = document.createElement('div');
            controlText.style.fontFamily = 'Arial,sans-serif';
            controlText.style.fontSize = '12px';
            controlText.style.paddingLeft = '4px';
            controlText.style.paddingRight = '4px';
            controlText.innerHTML = '<b>Home <span class="glyphicon glyphicon-home"></span></b>';
            controlUI.appendChild(controlText);

            // Setup the click event listeners: simply set the map to
            // Chicago
            google.maps.event.addDomListener(controlUI, 'click', function () {
                map.setCenter(new google.maps.LatLng(centerLat, centerLong))
                map.fitBounds(latlngbounds);
                clearAnimation();
                activeList[activeList.length - 1].marker.setAnimation(google.maps.Animation.BOUNCE);
                activeList[activeList.length - 1].infoWindow.open(map, activeList[activeList.length - 1].marker);
            });
        }

        function LineControl(controlDiv, map) {
            // Set CSS styles for the DIV containing the control
            // Setting padding to 5 px will offset the control
            // from the edge of the map
            controlDiv.style.padding = '5px';

            // Set CSS for the control border
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = 'white';
            controlUI.style.borderStyle = 'solid';
            controlUI.style.borderWidth = '2px';
            controlUI.style.cursor = 'pointer';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to toggle line between locations';
            controlDiv.appendChild(controlUI);

            // Set CSS for the control interior
            var controlText = document.createElement('div');
            controlText.style.fontFamily = 'Arial,sans-serif';
            controlText.style.fontSize = '12px';
            controlText.style.paddingLeft = '4px';
            controlText.style.paddingRight = '4px';
            controlText.innerHTML = '<b>Line <span class="glyphicon glyphicon-retweet"></span></b>';
            controlUI.appendChild(controlText);

            google.maps.event.addDomListener(controlUI, 'click', function () {
                if (poly.map == null) {
                    poly.setMap(map);
                } else {
                    poly.setMap(null);
                }
            });
        }

        function PlayControl(controlDiv, map) {

            // Set CSS styles for the DIV containing the control
            // Setting padding to 5 px will offset the control
            // from the edge of the map
            controlDiv.style.padding = '5px';
            // Set CSS for the control border
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = 'white';
            controlUI.style.borderStyle = 'solid';
            controlUI.style.borderWidth = '2px';
            controlUI.style.cursor = 'pointer';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Click to play the animation';
            controlDiv.appendChild(controlUI);

            // Set CSS for the control interior
            var controlText = document.createElement('div');
            controlText.style.fontFamily = 'Arial,sans-serif';
            controlText.style.fontSize = '12px';
            controlText.style.paddingLeft = '4px';
            controlText.style.paddingRight = '4px';
            controlText.innerHTML = '<b>Play <span class="glyphicon glyphicon-play"></span></b>';
            controlUI.appendChild(controlText);

            // Setup the click event listeners: simply set the map to
            // Chicago
            google.maps.event.addDomListener(controlUI, 'click', function () {
                clearAnimation();
                playSlideShow();
            });
        }

        // Initialize the map.
        function initialize() {
            // Direction service
            directionsDisplay = new google.maps.DirectionsRenderer();
            // Center point
            var myLatLng = new google.maps.LatLng(10.820682, 106.661579);
            // Map Opttions
            var mapOptions = {
                center: myLatLng,
                zoom: 13,
                width: 900
            };
            // The map
            map = new google.maps.Map(document.getElementById("map-canvas"),
                mapOptions);
            // Direction service
            directionsDisplay.setMap(map);

            // Create the DIV to hold the control and
            // call the HomeControl() constructor passing
            // in this DIV.
            var homeControlDiv = document.createElement('div');
            var homeControl = new HomeControl(homeControlDiv, map);

            homeControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(homeControlDiv);

            var lineControlDiv = document.createElement('div');
            var lineControl = new LineControl(lineControlDiv, map);

            homeControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(lineControlDiv);

            var playControlDiv = document.createElement('div');
            var playControl = new PlayControl(playControlDiv, map);

            playControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(playControlDiv);

            var lineArr = [];
            var LngAvg;
            var SumLng = 0;
            var LatAvg;
            var SumLat = 0;
            var count = 0;
            latlngbounds = new google.maps.LatLngBounds();
            var locationListHtml = "";

            // Get location list
            $.getJSON("/Trajectory/GetLocationList/", { trajectId: '@Model.Id' }, function (data) {

                // Set location list for other use
                locationList = data;

                // For datepicker
                for (var i = 0; i < locationList.length; i++) {
                    SelectedDates.push(locationList[i].CreatedDate2);
                }

                $.getJSON("IsMyTrajectory", { userName: '@User.Identity.Name', locationId: locationList[0].Id }, function (data) {
                    for (var i = (locationList.length - 1) ; i >= 0; i--) {
                        // Generate location list html
                        if (data) {
                            var newRow = '<tr id="' + locationList[i].Id + '"><td>' + locationList[i].Index + '</td><td> ' + locationList[i].CreatedDate + '</td><td><a href="/Location/ManageLocationImages?locationId=' + locationList[i].Id + '&index=' + locationList[i].Index + '"><span class="glyphicon glyphicon-pencil"></span></a></td></tr>';
                            $('#myTable tr:last').after(newRow);
                        } else {
                            var newRow = '<tr id="' + locationList[i].Id + '"><td>' + locationList[i].Index + '</td><td> ' + locationList[i].CreatedDate + '</td></tr>';
                            $('#myTable tr:last').after(newRow);
                        }
                    }
                })

                $.each(locationList, function (index, value) {

                    // Coordinate of each location
                    var point = new google.maps.LatLng(value.Latitude, value.Longitude);

                    // Pust location to the bound of the map
                    latlngbounds.extend(point);

                    // For calculating center point
                    SumLng += value.Longitude;
                    SumLat += value.Latitude;
                    count = index;
                    lineArr.push(point);

                    // New Marker with label
                    var marker = new MarkerWithLabel({
                        position: point,
                        draggable: false,
                        map: map,
                        labelText: value.Index,
                        labelClass: "labels", // the CSS class for the label
                        labelStyle: { opacity: 0.75 },
                        labelVisible: true,
                    });

                    // Marker image
                    var image = {
                        url: '../Images/marker.png',
                        size: new google.maps.Size(32, 32),
                    }

                    // Infor window for each marker
                    var infowindow = new google.maps.InfoWindow({
                        content: value.CreatedDate + '</br>' + (locationList[index].Address ? locationList[index].Address : "")
                    });

                    // New marker only
                    var marker;
                    if (locationList.length == (index + 1)) {
                        marker = new google.maps.Marker({
                            position: point,
                            map: map,
                            icon: '../Images/marker-end.png',
                            title: 'Time: ' + value.CreatedDate,
                            animation: google.maps.Animation.BOUNCE
                        });
                    } else if (index == 0) {
                        marker = new google.maps.Marker({
                            position: point,
                            map: map,
                            animation: google.maps.Animation.DROP,
                            icon: '../Images/marker-start.png',
                            title: 'Time: ' + value.CreatedDate
                        });
                    } else {
                        marker = new google.maps.Marker({
                            position: point,
                            map: map,
                            animation: google.maps.Animation.DROP,
                            icon: '../Images/marker-normal.png',
                            title: 'Time: ' + value.CreatedDate
                        });
                    }
                    locationList[index].infoWindow = infowindow;
                    locationList[index].marker = marker;

                    google.maps.event.addListener(marker, 'mouseover', function () {
                        clearAnimation();
                        infowindow.open(map, marker);
                    });

                    google.maps.event.addListener(marker, 'mouseout', function () {
                        setTimeout(function () { infowindow.close(); }, 3000);
                    });

                    // Click event for markers
                    google.maps.event.addListener(marker, 'click', (function (marker) {

                        // Generate modal with carousel inside
                        var itemHtml = $("#slider-item").html();
                        var activeItemHtml = $("#slider-active-item").html();
                        var modalHtml = $("#modalbox1").html();
                        var modal = $("#modalbox1");

                        return function () {
                            var collectionItems = "";
                            var contentString = "";
                            var modelContent = "";
                            modalHtml = modalHtml.replace("{modal-title}", locationList[index].Address ? locationList[index].Address : "");
                            // Get all image of a point
                            $.getJSON("/Trajectory/GetImgList/", { locateId: value.Id }, function (data) {
                                var imageList = data;
                                // Add modal if a point has image
                                if (imageList.length > 0) {
                                    var tempItem = activeItemHtml;
                                    tempItem = tempItem.replace("{item-link}", imageList[0]);
                                    var slides = new Array();
                                    collectionItems += tempItem;
                                    for (var i = 0; i < imageList.length; i++) {
                                        var newItem = new Object();
                                        newItem.url = imageList[i]
                                        newItem.caption = "Captured on " + locationList[index].CreatedDate + " at " + locationList[index].Address
                                        slides.push(newItem);
                                    }
                                    //modelContent = modalHtml.replace("{slider-item}", collectionItems);
                                    //modal.html(modelContent);

                                    var modalHtml = $("#modalbox1").html();
                                    var modal = $("#modalbox1");
                                    var modalboxHTML = modalHtml.replace("{modal-title}", locationList[index].Address ? locationList[index].Address : "")
                                    modal.html(modalboxHTML);
                                    var newHTML = $("#simple-slide").html();

                                    $("#modalbody").html(newHTML);

                                    modal.modal("show");

                                    $('#slideshow-2').rsfSlideshow({
                                        slides: slides,
                                        controls: {
                                            playPause: { auto: true },
                                            previousSlide: { auto: true },
                                            nextSlide: { auto: true },
                                            index: { auto: true }
                                        },
                                        interval: 3,
                                        transition: 500,
                                        effect: {
                                            effects: Array('slideLeft', 'slideUp', 'slideRight', 'slideDown'),
                                            iteration: 'random'
                                        }
                                    });
                                }
                            })
                        }
                    })(marker));
                });

                // Option for the connection between point line
                var polyOption = {
                    geodesic: true,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.9,
                    strokeWeight: 1.5
                };

                // Add the connection line
                poly = new google.maps.Polyline(polyOption);
                poly.setMap(map);
                var path = poly.getPath();
                for (var i = 0; i < lineArr.length; i++) {
                    path.push(lineArr[i]);
                }

                // Relocate the map to the proper position
                centerLat = SumLat / (count + 1);
                centerLong = SumLng / (count + 1);
                // Set center of the map
                map.setCenter(new google.maps.LatLng(SumLat / (count + 1), SumLng / (count + 1)));
                // Make all point can be seen
                map.fitBounds(latlngbounds);
                locationList[locationList.length - 1].marker.setAnimation(google.maps.Animation.BOUNCE);
                locationList[locationList.length - 1].infoWindow.open(map, locationList[locationList.length - 1].marker);
                activeList = locationList;

                // Initiate calendar
                datetimeController.selectDatePicker("calendar-1", new Date(locationList[0].CreatedDate2), new Date(locationList[locationList.length - 1].CreatedDate2), new Date(locationList[locationList.length - 1].CreatedDate2));
                // Initiate Direction Service
                calcRoute();
                //locationFilter reset-filter
                $("#location-filter").click(function () {
                    var fromDate = $("#date1").val();
                    var toDate = $("#date2").val();
                    locationFilter(fromDate, toDate);
                });

                $("#reset-filter").click(function () {
                    resetFilter();
                });

                $("#date1").datepicker({
                    minDate: new Date(locationList[0].CreatedDate2),
                    maxDate: new Date(locationList[(locationList.length - 1)].CreatedDate2)
                });
                $('#date1').datepicker('setDate', new Date(locationList[0].CreatedDate2));

                $("#date2").datepicker({
                    minDate: new Date(locationList[0].CreatedDate2),
                    maxDate: new Date(locationList[(locationList.length - 1)].CreatedDate2)
                });
                $('#date2').datepicker('setDate', new Date(locationList[(locationList.length - 1)].CreatedDate2));
            });

        }

        google.maps.event.addDomListener(window, 'load', initialize);

        $('#myTable').on('click', 'tr', function (event) {
            var a = $(this).attr('id');
            clearAnimation();
            for (var i = 0; i < locationList.length; i++) {
                if (locationList[i].Id == a) {
                    locationList[i].marker.setAnimation(google.maps.Animation.BOUNCE);
                    locationList[i].infoWindow.open(map, locationList[i].marker);
                    $(this).toggleClass("info");
                    $(this).siblings("tr").removeClass("info");
                }
            }

        });

        function playSlideShow() {
            map.setZoom(13);
            map.setCenter(new google.maps.LatLng(activeList[0].Latitude, activeList[0].Longitude));
            for (var i = 0; i < activeList.length; i++) {
                slideShow(i);
            }
        }

        function slideShow(i) {
            setTimeout(function () {
                if (i > 0) {
                    activeList[i - 1].marker.setAnimation(null);
                    activeList[i - 1].infoWindow.close();
                }
            }, 3000 * i);

            var marker = activeList[i].marker;
            var infoWindow = activeList[i].infoWindow;
            setTimeout(function () {
                if (i > 0) {
                    var bound = new google.maps.LatLngBounds();
                    var point1 = new google.maps.LatLng(activeList[i].Latitude, activeList[i].Longitude);
                    var point2 = new google.maps.LatLng(activeList[i - 1].Latitude, activeList[i - 1].Longitude);
                    bound.extend(point1);
                    bound.extend(point2);
                    map.fitBounds(bound);
                }
                marker.setAnimation(google.maps.Animation.BOUNCE);
                infoWindow.open(map, marker);
            }, 3000 * i);

        }

    });

    // Fix Manage
    //
    //
    //
    //
    function ajaxGetLocationListByDate(dateText) {
        $.getJSON("/Trajectory/GetLocationListByDate/", { trajectId: '@Model.Id', createdDate: dateText }, function (data) {
            locationSearchList = data;
            $('#myTable tr').remove();
            if (locationSearchList.length > 0) {
                $.getJSON("IsMyTrajectory", { userName: '@User.Identity.Name', locationId: locationSearchList[0].Id }, function (data) {
                    for (var i = (locationSearchList.length - 1) ; i >= 0; i--) {
                        // Generate location list html
                        if (data) {
                            var newRow = '<tr id="' + locationSearchList[i].Id + '"><td>' + locationSearchList[i].Index + '</td><td> ' + locationSearchList[i].CreatedDate + '</td><td><a href="/Location/ManageLocationImages?locationId=' + locationSearchList[i].Id + '&index=' + locationSearchList[i].Index + '"><span class="glyphicon glyphicon-pencil"></span></a></td></tr>';
                            $('#myTable').append(newRow);
                        } else {
                            var newRow = '<tr id="' + locationSearchList[i].Id + '"><td>' + locationSearchList[i].Index + '</td><td> ' + locationSearchList[i].CreatedDate + '</td></tr>';
                            $('#myTable').append(newRow);
                        }

                    }
                })
            } else {
                var newRow = '<tr id=""><td>No activity this day!</td></tr>';
                $('#myTable').append(newRow);
            }
        })
    }

    function locationFilter(dateText1, dateText2) {
        $.getJSON("/Trajectory/GetLocationListByDateRange/", { trajectId: '@Model.Id', fromDate: dateText1, toDate: dateText2 }, function (data) {
            locationSearchList = data;
            FlagArray = new Array();
            $('#myTable tr').remove();
            if (locationSearchList.length > 0) {
                $.getJSON("IsMyTrajectory", { userName: '@User.Identity.Name', locationId: locationSearchList[0].Id }, function (data) {
                    for (var i = (locationSearchList.length - 1) ; i >= 0; i--) {
                        // Generate location list html
                        if (data && $.inArray(locationSearchList[i], FlagArray) == -1) {
                            var newRow = '<tr id="' + locationSearchList[i].Id + '"><td>' + locationSearchList[i].Index + '</td><td> ' + locationSearchList[i].CreatedDate + '</td><td><a href="/Location/ManageLocationImages?locationId=' + locationSearchList[i].Id + '&index=' + locationSearchList[i].Index + '"><span class="glyphicon glyphicon-pencil"></span></a></td></tr>';
                            $('#myTable').append(newRow);
                        } else {
                            var newRow = '<tr id="' + locationSearchList[i].Id + '"><td>' + locationSearchList[i].Index + '</td><td> ' + locationSearchList[i].CreatedDate + '</td></tr>';
                            $('#myTable').append(newRow);
                        }
                        FlagArray.push(locationSearchList[i]);
                    }
                })
            } else {
                var newRow = '<tr id=""><td>No activity this day!</td></tr>';
                $('#myTable').append(newRow);
            }
        })
    }

    function clearAnimation() {
        for (var i = 0; i < activeList.length; i++) {
            activeList[i].marker.setAnimation(null);
            activeList[i].infoWindow.close();
        }
    }

    function setHome() {
        map.setCenter(new google.maps.LatLng(centerLat, centerLong))
        map.fitBounds(latlngbounds);
        clearAnimation();
        activeList[activeList.length - 1].marker.setAnimation(google.maps.Animation.BOUNCE);
        activeList[activeList.length - 1].infoWindow.open(map, activeList[activeList.length - 1].marker);
    }

    function clearRoute() {
        for (var i = 0; i < directionList.length; i++) {
            directionList[i].setMap(null);
        }
    }

    function fuck(i, request, rendererOptions) {
        setTimeout(function () {
            directionsService.route(request, function (result, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
                    directionsDisplay.setMap(map);
                    directionsDisplay.setDirections(result);
                    directionList.push(directionsDisplay);
                }
            });
        }, i * 500);
    }

    // Direction service
    function calcRoute() {
        var selectedMode = document.getElementById('mode').value;
        if (selectedMode != "NONE") {
            clearRoute();
            for (var i = 0; i < (locationList.length - 1) ; i++) {
                var start = new google.maps.LatLng(locationList[i].Latitude, locationList[i].Longitude)
                var end = new google.maps.LatLng(locationList[i + 1].Latitude, locationList[i + 1].Longitude);

                var request = {
                    origin: start,
                    destination: end,
                    travelMode: google.maps.TravelMode[selectedMode]
                };
                var rendererOptions = {
                    draggable: false,
                    suppressMarkers: true,
                    polylineOptions: { strokeColor: '#0000CC', strokeOpacity: 0.8, strokeWeight: 5 },
                    preserveViewport: true
                    //end redererOptions
                };
                fuck(i, request, rendererOptions);
            }
        } else {
            for (var i = 0; i < directionList.length; i++) {
                directionList[i].setMap(null);
            }
        }
    }

    function resetFilter() {
        locationSearchList = locationList;
        $('#myTable tr').remove();
        if (locationSearchList.length > 0) {
            $.getJSON("IsMyTrajectory", { userName: '@User.Identity.Name', locationId: locationSearchList[0].Id }, function (data) {
                for (var i = (locationSearchList.length - 1) ; i >= 0; i--) {
                    // Generate location list html
                    if (data) {
                        var newRow = '<tr id="' + locationSearchList[i].Id + '"><td>' + locationSearchList[i].Index + '</td><td> ' + locationSearchList[i].CreatedDate + '</td><td><a href="/Location/ManageLocationImages?locationId=' + locationSearchList[i].Id + '&index=' + locationSearchList[i].Index + '"><span class="glyphicon glyphicon-pencil"></span></a></td></tr>';
                        $('#myTable').append(newRow);
                    } else {
                        var newRow = '<tr id="' + locationSearchList[i].Id + '"><td>' + locationSearchList[i].Index + '</td><td> ' + locationSearchList[i].CreatedDate + '</td></tr>';
                        $('#myTable').append(newRow);
                    }
                }
            })
        } else {
            var newRow = '<tr id=""><td>No activity this day!</td></tr>';
            $('#myTable').append(newRow);
        }
        $('#date1').datepicker('setDate', new Date(locationList[0].CreatedDate2));
        $('#date2').datepicker('setDate', new Date(locationList[(locationList.length - 1)].CreatedDate2));
    }

</script>

<!-- Place holder div - for generate modal with carousel -->
<div id="slider-active-item" style="display:none">
    <div class="item active">
        <img data-src="{item-link}" alt="item-alt" style="width: 560px; height:400px">
    </div>
</div>

<div id="slider-item" style="display:none">
    <div class="item">
        <img data-src="{item-link}" alt="item-alt" style="width: 560px; height:400px">
    </div>
</div>

<div id="location" style="display:none">
    <ul>location-item</ul>
</div>

<div class="modal fade" id="modalbox1">
    <div class="modal-dialog modal-size">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Images captured at {modal-title}</h4>
            </div>
            <div class="modal-body" id="modalbody">
            </div>
            @*<div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>*@
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<!--div for the map-->
<div class="row" style="margin-top:10px">
    <div id="map-canvas" class="col-lg-8 col-md-8 col-sm-12 col-xs-12">
    </div>

    <div id="locationPanel" class="col-lg-4 col-md-4 col-sm-12 col-xs-12" style="padding-left:5px;padding-right:5px;">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="panel panel-primary" style="margin-bottom:10px;">
                <!-- Default panel contents -->
                <div class="panel-heading" style="padding:5px;">Location Filter</div>
                <div id="filter-form" style="margin:0px;">
                    <table id="tb-filter" class="table-condensed">
                        <tr>
                            <td><span>Between</span></td>
                            <td>
                                <input type="text" id="date-picker1" style="display:none" />
                                <input type="text" id="date1" class="col-lg-12 col-md-12 col-xs-12 form-control" />
                            </td>
                            <td><span>And</span></td>
                            <td>
                                <input type="text" id="date-picker2" style="display:none" />
                                <input type="text" id="date2" class="col-lg-12 col-md-12 col-xs-12 form-control" />
                            </td>
                        </tr>
                        <tr>
                            <td colspan="4">
                                <button class="btn btn-success col-lg-4 col-md-4 col-xs-4" id="reset-filter"> Reset <span class="glyphicon glyphicon-remove"></span></button>
                                <button class="btn btn-primary btn-default col-lg-4 col-md-4 col-xs-4" id="location-filter"> Filter <span class="glyphicon glyphicon-filter"></span></button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="panel panel-primary" style="margin-bottom:10px;">
                <!-- Default panel contents -->
                <div class="panel-heading" style="padding:5px;">Location Timeline</div>
                <div id="location-list">
                    <table id="myTable" class="table table-hover">
                        <tr></tr>
                    </table>
                </div>
                <!-- Table -->
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12" style="width: 100%; text-align: center;">
            <div id="calendar-1" style="margin: 0px; padding: 0px; display: inline-block; width:100%"></div>
        </div>
    </div>
</div>

<div class="rss-container" id="simple-slide" style="display:none">
    <div id="slideshow-2" class="rs-slideshow">
        <ol class="slides"></ol>
    </div>
</div>

<div class="row chart-report">
    @{
        Html.RenderPartial("~/Views/Report/ReportPartial.cshtml", Model);
    }
</div>
<div class="row">
    <!-- AddThis Button BEGIN -->
    <div class="addthis_toolbox addthis_default_style addthis_32x32_style">
        <a class="addthis_button_facebook"></a>
        <a class="addthis_button_google_plusone_share"></a>
        <a class="addthis_button_twitter"></a>
        <a class="addthis_button_linkedin"></a>
        <a class="addthis_button_gmail"></a>
        <a class="addthis_button_yahoomail"></a>
        <a class="addthis_button_compact"></a><a class="addthis_counter addthis_bubble_style"></a>
    </div>
    <!-- AddThis Button END -->
</div>

<div id="panel" style="border: 1px solid #666666">
    <b>Suggestion: </b>
    <select id="mode" onchange="calcRoute();">
        <option value="NONE">None</option>
        <option value="DRIVING">Driving</option>
        <option value="WALKING">Walking</option>
        <option value="BICYCLING">Bicycling</option>
        <option value="TRANSIT">Transit</option>
    </select>
</div>
@section scripts{
<!-- Javascript -->
<script type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC9aFiBetpU1mIBG65QpO8LzYslOhdQyXE&sensor=true">
</script>
<script src="/Scripts/markerwithlabel.js"></script>
<script src="/Scripts/jquery.rs.slideshow.js"></script>
<script type="text/javascript">var addthis_config = { "data_track_addressbar": true };</script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-534c0de3376c4f4c"></script>
}
