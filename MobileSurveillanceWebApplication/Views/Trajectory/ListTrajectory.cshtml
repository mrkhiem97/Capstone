@model MobileSurveillanceWebApplication.Models.ViewModel.ListTrajectoryViewModel
@{
    ViewBag.Title = "ListTrajectory";
    var searchUserModel = (MobileSurveillanceWebApplication.Models.ViewModel.TrajectSearchCriteriaViewModel)ViewBag.SearchCriteriaViewModel;
    int count = 0;
    int count1 = 0;

}


<script>
    var Trajectories = [];
    var currentTraject;
    $(document).ready(function () {
        $(".btn-edit").click(function () {
            var id = $(this).parent().parent().parent().attr('id');
            currentTraject = id;
            $.getJSON("/Trajectory/GetTrajectory", { trajectId: id }, function (data) {
                $("#name").val(data.TrajectoryName);
                $("#description").val(data.Description);
                $("#status").val(data.Status);
            })
        });

        $.getJSON("/Trajectory/GetTrajectoryList/", {}, function (data) {
            for (var i = 0; i < data.length; i++) {
                Trajectories.push(data[i]);
            }
        })
    });

</script>
<script>
    function onDeleteSuccess(response, status, data) {
        window.location.href = window.location.href;
    }

    function onDeleteFailure() {
        alert('Something went wrong, please try again!');
    }
</script>

<div>

    @{
        Html.RenderPartial("~/Views/Profile/UserProfile.cshtml", Model.FriendViewModel);
    }

    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 filter-trajectory-form" style="">
        @using (Html.BeginForm("ListTrajectory", "Trajectory", FormMethod.Post, new { @role = "search" }))
        {
            <div>
                <input type="text" id="searchTraject" name="SearchKeyword" class="typeahead form-control" placeholder="Trajectories name..." value="@searchUserModel.SearchKeyword" style="width:400px">
                <input type="hidden" name="UserId" value="@searchUserModel.UserId" />
                <input type="hidden" name="PageNumber" value="1" />
                <input type="hidden" name="PageCount" value="0" />
                <input type="hidden" name="DateFrom" value="@searchUserModel.DateFrom" />
                <input type="hidden" name="DateTo" value="@searchUserModel.DateTo" />
                <button type="submit" class="btn btn-default" style="">Search <span class="glyphicon glyphicon-search"></span></button>
            </div>
        }

    </div>

    <!-- Pagination-->
    @*<div class="row" style="text-align: center;clear:both">
            <div style="text-align: left; display: inline-block; /* for ie6/7: */ *display: inline; zoom: 1;">
                <ul class="pagination">

                    <li>@Html.ActionLink("First", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = 1, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                    @if (searchUserModel.PageNumber > 1)
                    {
                        <li>@Html.ActionLink("<<", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber - 1, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                    }
                    @if (searchUserModel.PageCount > 5)
                    {
                        int firstSegmentLength = 3;
                        while (searchUserModel.PageNumber - firstSegmentLength < 0)
                        {
                            firstSegmentLength--;
                        }

                        int lastSegment = searchUserModel.PageNumber + 3;


                        if (lastSegment > searchUserModel.PageCount)
                        {
                            lastSegment = searchUserModel.PageCount;
                        }

                        for (int i = searchUserModel.PageNumber - firstSegmentLength + 1; i < searchUserModel.PageNumber; i++)
                        {
                            <li>@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                        }
                        <li class="active">@Html.ActionLink((searchUserModel.PageNumber).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                        for (int i = searchUserModel.PageNumber + 1; i <= lastSegment + 3 - firstSegmentLength; i++)
                        {
                            <li>@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                        }
                    }
                    else
                    {
                        for (int i = 1; i <= searchUserModel.PageCount; i++)
                        {
                            if (i == searchUserModel.PageNumber)
                            {
                                <li class="active">@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                            }
                            else
                            {
                                <li>@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                            }
                        }
                    }
                    @if (searchUserModel.PageNumber < searchUserModel.PageCount)
                    {
                        <li>@Html.ActionLink(">>", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber + 1, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                    }
                    <li>@Html.ActionLink("Last", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageCount, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                </ul>
            </div>
        </div>*@



    @if (Model.ListTrajectory.Any())
    {
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="panel panel-primary" style="border-color: #cccccc;">
                <!-- Default panel contents -->
                <div class="panel-heading" style="padding:5px;">@(ViewBag.FriendStatus == null ? "My" : "") Trajectories</div>

                @foreach (var item in Model.ListTrajectory)
                {
                    if (ViewBag.FriendStatus == null || (ViewBag.FriendStatus != null && item.Status.Equals("Public", StringComparison.InvariantCultureIgnoreCase)))
                    {
                        <div class="row trajectory-list-item" id="@item.Id">

                            <div class="trajectory-thumail col-lg-5 col-md-6 col-sm-12 col-xs-12">
                                <img src="http://maps.googleapis.com/maps/api/staticmap?center=@item.StartLatitude,@item.StartLongitude&markers=@item.StartLatitude,@item.StartLongitude&zoom=13&size=400x280&sensor=true" alt="Mobile Surveillance">
                            </div>
                            <div class="col-lg-7 col-md-6 col-sm-12 col-xs-12" style="padding: 5px; display: inline-block; margin-left:20px">
                                <div class="row">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 traject-detail " style="font-size: 25px">
                                        @Html.ActionLink(@item.TrajectoryName, "ViewDetail", new { trajectoryId = item.Id })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-7 col-md-7 col-sm-12 col-xs-12">
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 traject-detail ">
                                            <b><u>Created on:</u></b> @item.CreateDate
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 traject-detail ">
                                            <b><u>Start from:</u></b> @item.StartAddress at @item.StartTime
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 traject-detail ">
                                            <b><u>Current address:</u></b> @item.EndAddress at @item.EndTime
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 traject-detail ">
                                            <b><u>Last updated:</u></b> @item.LastUpdate
                                        </div>
                                    </div>
                                    <div class="col-lg-5 col-md-5 col-sm-12 col-xs-12 ">
                                        <div class="traject-detail">
                                            <b>
                                                <u>
                                                    Description
                                                </u>
                                            </b>
                                            <p style="height: 180px;overflow-y: auto; overflow-x: hidden; padding: 5px;">
                                                @item.Description
                                            </p>
                                        </div>

                                    </div>
                                </div>


                                @if (ViewBag.FriendStatus == null)
                                {
                                    var modalDeleteId = "delete-modal-" + count.ToString();
                                    count++;
                                    var modalEditId = "edit-modal-" + count1.ToString();
                                    count1++;
                                    item.ModalEditId = modalEditId;

                                    <div class="row" style="margin-left:0px;">

                                        <!-- Button trigger modal -->
                                        <button class="btn btn-primary btn-md btn-edit" style="width:12%;" data-toggle="modal" data-target="#@modalEditId">
                                            Edit <span class="glyphicon glyphicon-pencil"></span>
                                        </button>
                                        <button type="button" class="btn btn-danger" style="width:12%;" data-toggle="modal" data-target="#@modalDeleteId">
                                            Delete <span class="glyphicon glyphicon-remove"></span>
                                        </button>

                                        @{
                                    Html.RenderPartial("~/Views/Trajectory/_EditTrajectory.cshtml", item);
                                        }
                                        <div class="modal fade" id="@modalDeleteId">
                                            <div class=" modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                                        <h3 class="modal-title">Alert</h3>
                                                    </div>
                                                    <div class="modal-body">
                                                        <p class="modal-delete-alert">Delete "@item.TrajectoryName" trajectory?</p>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                                                        @Ajax.ActionLink("Delete", "Delete", new { trajectoryId = item.Id }, new AjaxOptions()
                                                        {
                                                            HttpMethod = "DELETE",
                                                            OnSuccess = "onDeleteSuccess",
                                                            OnFailure = "onDeleteFailure",
                                                        }, new { @class = "btn btn-primary" })
                                                    </div>
                                                </div><!-- /.modal-content -->
                                            </div><!-- /.modal-dialog -->
                                        </div><!-- /.modal -->

                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>




            <!-- Pagination-->
            <div class="row" style="text-align: center;clear:both">
                <div style="text-align: left; display: inline-block; /* for ie6/7: */ *display: inline; zoom: 1;">
                    <ul class="pagination">

                        <li>@Html.ActionLink("First", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = 1, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                        @if (searchUserModel.PageNumber > 1)
                        {
                            <li>@Html.ActionLink("<<", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber - 1, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                        }
                        @if (searchUserModel.PageCount > 5)
                        {
                            int firstSegmentLength = 3;
                            while (searchUserModel.PageNumber - firstSegmentLength < 0)
                            {
                                firstSegmentLength--;
                            }

                            int lastSegment = searchUserModel.PageNumber + 3;


                            if (lastSegment > searchUserModel.PageCount)
                            {
                                lastSegment = searchUserModel.PageCount;
                            }

                            for (int i = searchUserModel.PageNumber - firstSegmentLength + 1; i < searchUserModel.PageNumber; i++)
                            {
                                <li>@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                            }
                            <li class="active">@Html.ActionLink((searchUserModel.PageNumber).ToString(), "ListUser", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                            for (int i = searchUserModel.PageNumber + 1; i <= lastSegment + 3 - firstSegmentLength; i++)
                            {
                                <li>@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                            }
                        }
                        else
                        {
                            for (int i = 1; i <= searchUserModel.PageCount; i++)
                            {
                                if (i == searchUserModel.PageNumber)
                                {
                                    <li class="active">@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                                }
                                else
                                {
                                    <li>@Html.ActionLink((i).ToString(), "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = i, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                                }
                            }
                        }
                        @if (searchUserModel.PageNumber < searchUserModel.PageCount)
                        {
                            <li>@Html.ActionLink(">>", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageNumber + 1, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                        }
                        <li>@Html.ActionLink("Last", "ListTrajectory", new { SearchKeyword = searchUserModel.SearchKeyword, PageNumber = searchUserModel.PageCount, PageCount = searchUserModel.PageCount, UserId = searchUserModel.UserId, DateFrom = searchUserModel.DateFrom, DateTo = searchUserModel.DateTo })</li>
                    </ul>
                </div>
            </div>

        </div>
    }
</div>
<script>
    var substringMatcher = function (strs) {
        return function findMatches(q, cb) {
            var matches, substringRegex;

            // an array that will be populated with substring matches
            matches = [];

            // regex used to determine if a string contains the substring `q`
            substrRegex = new RegExp(q, 'i');

            // iterate through the pool of strings and for any string that
            // contains the substring `q`, add it to the `matches` array
            $.each(strs, function (i, str) {
                if (substrRegex.test(str)) {
                    // the typeahead jQuery plugin expects suggestions to a
                    // JavaScript object, refer to typeahead docs for more info
                    matches.push({ value: str });
                }
            });

            cb(matches);
        };
    };

    //var states = Trajectories;

    var states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
      'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii',
      'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana',
      'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota',
      'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire',
      'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota',
      'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island',
      'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',
      'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
    ];

    $('#searchTraject').typeahead({
        limit: 3,
        hint: true,
        highlight: true,
        minLength: 1,

    },
    {
        name: 'states',
        displayKey: 'value',
        source: substringMatcher(Trajectories)
    });
</script>

