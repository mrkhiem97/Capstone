@model MobileSurveillanceWebApplication.Models.ViewModel.TrajectoryViewModel
@{
    var searchModel = (MobileSurveillanceWebApplication.Models.ViewModel.TrajectorySearchCriteriaViewModel)ViewBag.SearchCriteriaViewModel;
}


@using (Html.BeginForm("SaveTrajectory", "Trajectory", FormMethod.Post, new { role = "form" }))
{
    @Html.AntiForgeryToken()
    <!-- Modal -->
    <div class="modal fade" id="@Model.ModalEditId" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title" id="myModalLabel">Update trajectory @Model.TrajectoryName</h3>
                </div>
                <div class="modal-body">
                    <fieldset>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.TrajectoryName)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.TrajectoryName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TrajectoryName)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(model => model.Description)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Status)
                        </div>
                        <div class="editor-field">
                            @{
    var optionList = new List<SelectListItem>();
    optionList.Add(new SelectListItem() { Text = "Public", Value = "Public" });
    optionList.Add(new SelectListItem() { Text = "Private", Value = "Private" });

                            }
                            @Html.DropDownListFor(model => model.Status, optionList, new { @class = "form-control" })
                        </div>

                    </fieldset>
                </div>
                <div class="modal-footer">
                    @Html.HiddenFor(model => model.Id)
                    @Html.Hidden("UserId", searchModel.UserId)
                    @Html.Hidden("SearchKeyword", searchModel.SearchKeyword)
                    @Html.Hidden("PageNumber", searchModel.PageNumber)
                    @Html.Hidden("PageCount", searchModel.PageCount)
                    @Html.Hidden("DateFrom", searchModel.DateFrom)
                    @Html.Hidden("DateTo", searchModel.DateTo)
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
        </div>
    </div>
}